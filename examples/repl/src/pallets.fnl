;; pallets.fnl

(fn hex->rgb [hex]
  (let [hex8 (if (= (# hex) 8) hex (.. hex "ff"))]
    (fcollect [i 1 8 2]
      (/ (tonumber (string.sub hex8 i (+ i 1)) 16) 255.0))))

(local indecision [(hex->rgb :fff4e0)
                   (hex->rgb :8fcccb)
                   (hex->rgb :449489)
                   (hex->rgb :285763)
                   (hex->rgb :2f2b5c)
                   (hex->rgb :4b3b9c)
                   (hex->rgb :457cd6)
                   (hex->rgb :f2b63d)
                   (hex->rgb :d46e33)
                   (hex->rgb :e34262)
                   (hex->rgb :94353d)
                   (hex->rgb :57253b)
                   (hex->rgb :9c656c)
                   (hex->rgb :d1b48c)
                   (hex->rgb :b4ba47)
                   (hex->rgb :6d8c32)
                   (hex->rgb :2c1b2e)])

(local wintercode [(hex->rgb :540e46)
                   (hex->rgb :821653)
                   (hex->rgb :a1234d)
                   (hex->rgb :b35054)
                   (hex->rgb :c28d6b)
                   (hex->rgb :cfaa80)
                   (hex->rgb :cfbba5)
                   (hex->rgb :c99e91)
                   (hex->rgb :bd726f)
                   (hex->rgb :944e87)
                   (hex->rgb :3f2457)
                   (hex->rgb :18051a)
                   (hex->rgb :13102e)
                   (hex->rgb :1e2745)
                   (hex->rgb :29465e)
                   (hex->rgb :458282)
                   (hex->rgb :649e91)
                   (hex->rgb :a7d694)
                   (hex->rgb :ebe5ab)
                   (hex->rgb :e0c892)
                   (hex->rgb :c7a379)
                   (hex->rgb :91745c)
                   (hex->rgb :5c3c2e)
                   (hex->rgb :2b171b)
                   (hex->rgb :120612)
                   (hex->rgb :211b3b)
                   (hex->rgb :31376b)
                   (hex->rgb :72a6c2)
                   (hex->rgb :8acfdb)
                   (hex->rgb :c3dfe0)
                   (hex->rgb :f2ffff)
                   (hex->rgb :a0b6b8)
                   (hex->rgb :8d9da1)
                   (hex->rgb :5f6470)
                   (hex->rgb :3b3947)
                   (hex->rgb :24212b)])

(local vinik24 [(hex->rgb :000000)
                (hex->rgb :6f6776)
                (hex->rgb :9a9a97)
                (hex->rgb :c5ccb8)
                (hex->rgb :8b5580)
                (hex->rgb :c38890)
                (hex->rgb :a593a5)
                (hex->rgb :666092)
                (hex->rgb :9a4f50)
                (hex->rgb :c28d75)
                (hex->rgb :7ca1c0)
                (hex->rgb :416aa3)
                (hex->rgb :8d6268)
                (hex->rgb :be955c)
                (hex->rgb :68aca9)
                (hex->rgb :387080)
                (hex->rgb :6e6962)
                (hex->rgb :93a167)
                (hex->rgb :6eaa78)
                (hex->rgb :557064)
                (hex->rgb :9d9f7f)
                (hex->rgb :7e9e99)
                (hex->rgb :5d6872)
                (hex->rgb :433455)])

(local font (love.graphics.newFont 10))

(fn draw [pallet w? h?]
  (local (w h) (values (or w? 20) (or h? 20)))
  (local (ww wh) (love.window.getMode))
  (local si (math.floor (/ ww w)))
  (love.graphics.push)
  (each [key colour (ipairs pallet)]
    (local x (% (- key 1) si))
    (local y (math.floor (/ key si)))
    (love.graphics.setColor colour)
    (love.graphics.rectangle :fill (* x w) (* y h) w h)
    (love.graphics.setColor 0 0 0 1)
    (love.graphics.setFont font)
    (love.graphics.print key (+ 1 (* w x)) (+ 1 (* h y)))
    (love.graphics.setColor 1 1 1 1)
    (love.graphics.print key (* w x) (* h y)))
  (love.graphics.pop))

(fn wrap [pallet]
  (setmetatable pallet {:__index {: draw}}))

{:indecision (wrap indecision)
 :wintercode (wrap wintercode)
 :vinik24 (wrap vinik24)}
